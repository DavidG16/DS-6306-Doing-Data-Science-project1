library(RColorBrewer)
#install.packages("wordcloud2")
library(wordcloud2)
#install.packages("tm")
library(tm)
text = as.vector(impute_data['Style'])
docs = Corpus(VectorSource(text))
docs = docs %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
docs = tm_map(docs, content_transformer(tolower))
docs = tm_map(docs, removeWords, stopwords("english"))
tdm = TermDocumentMatrix(docs)
matrix = as.matrix(tdm)
words = sort(rowSums(matrix),decreasing=TRUE)
df_style = data.frame(word = names(words),freq=words)
text = as.vector(impute_data['Beer.Name'])
docs = Corpus(VectorSource(text))
docs = docs %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
docs = tm_map(docs, content_transformer(tolower))
docs = tm_map(docs, removeWords, stopwords("english"))
tdm = TermDocumentMatrix(docs)
matrix = as.matrix(tdm)
words = sort(rowSums(matrix),decreasing=TRUE)
df_name = data.frame(word = names(words),freq=words)
df_name
#
library(wordcloud)
#install.packages("RColorBrewer")
library(RColorBrewer)
#install.packages("wordcloud2")
library(wordcloud2)
#install.packages("tm")
library(tm)
text = as.vector(impute_data['Style'])
docs = Corpus(VectorSource(text))
docs = docs %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
docs = tm_map(docs, content_transformer(tolower))
docs = tm_map(docs, removeWords, stopwords("english"))
tdm = TermDocumentMatrix(docs)
matrix = as.matrix(tdm)
words = sort(rowSums(matrix),decreasing=TRUE)
df_style = data.frame(word = names(words),freq=words)
text = as.vector(impute_data$Beer.Name)
docs = Corpus(VectorSource(text))
docs = docs %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
docs = tm_map(docs, content_transformer(tolower))
docs = tm_map(docs, removeWords, stopwords("english"))
tdm = TermDocumentMatrix(docs)
matrix = as.matrix(tdm)
words = sort(rowSums(matrix),decreasing=TRUE)
df_name = data.frame(word = names(words),freq=words)
df_name
#
library(wordcloud)
#install.packages("RColorBrewer")
library(RColorBrewer)
#install.packages("wordcloud2")
library(wordcloud2)
#install.packages("tm")
library(tm)
text = as.vector(impute_data['Style'])
docs = Corpus(VectorSource(text))
docs = docs %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
docs = tm_map(docs, content_transformer(tolower))
docs = tm_map(docs, removeWords, stopwords("english"))
tdm = TermDocumentMatrix(docs)
matrix = as.matrix(tdm)
words = sort(rowSums(matrix),decreasing=TRUE)
df_style = data.frame(word = names(words),freq=words)
text = as.vector(impute_data$Beer.Name)
docs = Corpus(VectorSource(text))
docs = docs %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
docs = tm_map(docs, content_transformer(tolower))
docs = tm_map(docs, removeWords, stopwords("english"))
tdm = TermDocumentMatrix(docs)
matrix = as.matrix(tdm)
words = sort(rowSums(matrix),decreasing=TRUE)
df_name = data.frame(word = names(words),freq=words)
wordcloud(words = df_style$word, freq = df_style$freq, min.freq = 1,max.words=300, random.order=FALSE, rot.per=0.35,colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df_name$word, freq = df_name$freq, min.freq = 1,max.words=300, random.order=FALSE, rot.per=0.35,colors=brewer.pal(6, "Dark2"))
wordcloud(words = df_style$word, freq = df_style$freq, min.freq = 1,max.words=100, random.order=FALSE, rot.per=0.35,colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df_name$word, freq = df_name$freq, min.freq = 1,max.words=100, random.order=FALSE, rot.per=0.35,colors=brewer.pal(6, "Dark2"))
wordcloud(words = df_style$word, freq = df_style$freq, min.freq = 1,max.words=100, random.order=FALSE, rot.per=0.35,colors=brewer.pal(8, "Dark2"))
set.seed(1234) # for reproducibility
wordcloud(words = df_name$word, freq = df_name$freq, min.freq = 1,max.words=100, random.order=FALSE, rot.per=0.35,colors=brewer.pal(6, "Dark2"))
splitPerc = .70
set.seed(j*49+15)
trainIndices = sample(1:dim(ale_ipa)[1],round(splitPerc * dim(ale_ipa)[1]))
train = ale_ipa[trainIndices,]
test = ale_ipa[-trainIndices,]
# Do knn
fit = knn(train[,c(8,10)], test[,c(8,10)],train$ipa_ale,k=5)
# Create a dataframe to simplify charting
plot.df = data.frame(test, predicted = fit)
plot.df
# Use ggplot
# 2-D plots example only
# Sepal.Length vs Sepal.Width
# First use Convex hull to determine boundary points of each cluster
plot.df1 = data.frame(x = plot.df$Sepal.Length,
y = plot.df$Sepal.Width,
predicted = plot.df$predicted)
splitPerc = .70
set.seed(j*49+15)
trainIndices = sample(1:dim(ale_ipa)[1],round(splitPerc * dim(ale_ipa)[1]))
train = ale_ipa[trainIndices,]
test = ale_ipa[-trainIndices,]
# Do knn
fit = knn(train[,c(8,10)], test[,c(8,10)],train$ipa_ale,k=5)
# Create a dataframe to simplify charting
plot.df = data.frame(test, predicted = fit)
plot.df
# Use ggplot
# 2-D plots example only
# Sepal.Length vs Sepal.Width
# First use Convex hull to determine boundary points of each cluster
plot.df1 = data.frame(x = plot.df$imputed_IBU,
y = plot.df$ABV,
predicted = plot.df$predicted)
find_hull = function(df) df[chull(df$x, df$y), ]
boundary = ddply(plot.df1, .variables = "predicted", .fun = find_hull)
ggplot(plot.df, aes(imputed_IBU, ABV, color = predicted, fill = predicted)) +
geom_point(size = 5) +
geom_polygon(data = boundary, aes(x,y), alpha = 0.5)
splitPerc = .70
set.seed(j*49+15)
trainIndices = sample(1:dim(ale_ipa)[1],round(splitPerc * dim(ale_ipa)[1]))
train = ale_ipa[trainIndices,]
test = ale_ipa[-trainIndices,]
# Do knn
fit = knn(train[,c(8,10)], test[,c(8,10)],train$ipa_ale,k=5)
# Create a dataframe to simplify charting
plot.df = data.frame(test, predicted = fit)
plot.df
# Use ggplot
# 2-D plots example only
# Sepal.Length vs Sepal.Width
# First use Convex hull to determine boundary points of each cluster
plot.df1 = data.frame(x = plot.df$imputed_IBU,
y = plot.df$ABV,
predicted = plot.df$predicted)
find_hull = function(df) df[chull(df$x, df$y), ]
boundary = ddply(plot.df1, .variables = "predicted", .fun = find_hull)
ggplot(plot.df, aes(imputed_IBU, ABV, color = predicted, fill = predicted)) +
geom_point(size = 5) +
geom_polygon(data = boundary, aes(x,y), alpha = 0.5) + ggtitle("KNN Clusters Boundery")
# plot source:
splitPerc = .70
set.seed(j*49+15)
trainIndices = sample(1:dim(ale_ipa)[1],round(splitPerc * dim(ale_ipa)[1]))
train = ale_ipa[trainIndices,]
test = ale_ipa[-trainIndices,]
# Do knn
fit = knn(train[,c(8,10)], test[,c(8,10)],train$ipa_ale,k=10)
# Create a dataframe to simplify charting
plot.df = data.frame(test, predicted = fit)
plot.df
# Use ggplot
# 2-D plots example only
# Sepal.Length vs Sepal.Width
# First use Convex hull to determine boundary points of each cluster
plot.df1 = data.frame(x = plot.df$imputed_IBU,
y = plot.df$ABV,
predicted = plot.df$predicted)
find_hull = function(df) df[chull(df$x, df$y), ]
boundary = ddply(plot.df1, .variables = "predicted", .fun = find_hull)
ggplot(plot.df, aes(imputed_IBU, ABV, color = predicted, fill = predicted)) +
geom_point(size = 5) +
geom_polygon(data = boundary, aes(x,y), alpha = 0.5) + ggtitle("KNN Clusters Boundery")
# plot source:
splitPerc = .70
set.seed(j*49+15)
trainIndices = sample(1:dim(ale_ipa)[1],round(splitPerc * dim(ale_ipa)[1]))
train = ale_ipa[trainIndices,]
test = ale_ipa[-trainIndices,]
# Do knn
fit = knn(train[,c(8,10)], test[,c(8,10)],train$ipa_ale,k=3)
# Create a dataframe to simplify charting
plot.df = data.frame(test, predicted = fit)
plot.df
# Use ggplot
# 2-D plots example only
# Sepal.Length vs Sepal.Width
# First use Convex hull to determine boundary points of each cluster
plot.df1 = data.frame(x = plot.df$imputed_IBU,
y = plot.df$ABV,
predicted = plot.df$predicted)
find_hull = function(df) df[chull(df$x, df$y), ]
boundary = ddply(plot.df1, .variables = "predicted", .fun = find_hull)
ggplot(plot.df, aes(imputed_IBU, ABV, color = predicted, fill = predicted)) +
geom_point(size = 5) +
geom_polygon(data = boundary, aes(x,y), alpha = 0.5) + ggtitle("KNN Clusters Boundery")
# plot source:
splitPerc = .70
set.seed(j*49+15)
trainIndices = sample(1:dim(ale_ipa)[1],round(splitPerc * dim(ale_ipa)[1]))
train = ale_ipa[trainIndices,]
test = ale_ipa[-trainIndices,]
# Do knn
fit = knn(train[,c(8,10)], test[,c(8,10)],train$ipa_ale,k=5)
# Create a dataframe to simplify charting
plot.df = data.frame(test, predicted = fit)
plot.df
# Use ggplot
# 2-D plots example only
# Sepal.Length vs Sepal.Width
# First use Convex hull to determine boundary points of each cluster
plot.df1 = data.frame(x = plot.df$imputed_IBU,
y = plot.df$ABV,
predicted = plot.df$predicted)
find_hull = function(df) df[chull(df$x, df$y), ]
boundary = ddply(plot.df1, .variables = "predicted", .fun = find_hull)
ggplot(plot.df, aes(imputed_IBU, ABV, color = predicted, fill = predicted)) +
geom_point(size = 5) +
geom_polygon(data = boundary, aes(x,y), alpha = 0.5) + ggtitle("KNN Clusters Boundery")
# plot source:
splitPerc = .70
set.seed(j*49+15)
trainIndices = sample(1:dim(ale_ipa)[1],round(splitPerc * dim(ale_ipa)[1]))
train = ale_ipa[trainIndices,]
test = ale_ipa[-trainIndices,]
# Do knn
fit = knn(train[,c(8,10)], test[,c(8,10)],train$ipa_ale,k=3)
# Create a dataframe to simplify charting
plot.df = data.frame(test, predicted = fit)
plot.df
# Use ggplot
# 2-D plots example only
# Sepal.Length vs Sepal.Width
# First use Convex hull to determine boundary points of each cluster
plot.df1 = data.frame(x = plot.df$imputed_IBU,
y = plot.df$ABV,
predicted = plot.df$predicted)
find_hull = function(df) df[chull(df$x, df$y), ]
boundary = ddply(plot.df1, .variables = "predicted", .fun = find_hull)
ggplot(plot.df, aes(imputed_IBU, ABV, color = predicted, fill = predicted)) +
geom_point(size = 5) +
geom_polygon(data = boundary, aes(x,y), alpha = 0.5) + ggtitle("KNN Clusters Boundery")
# plot source:
splitPerc = .70
set.seed(j*49+15)
trainIndices = sample(1:dim(ale_ipa)[1],round(splitPerc * dim(ale_ipa)[1]))
train = ale_ipa[trainIndices,]
test = ale_ipa[-trainIndices,]
# Do knn
fit = knn(train[,c(8,10)], test[,c(8,10)],train$ipa_ale,k=5)
# Create a dataframe to simplify charting
plot.df = data.frame(test, predicted = fit)
plot.df
# Use ggplot
# 2-D plots example only
# Sepal.Length vs Sepal.Width
# First use Convex hull to determine boundary points of each cluster
plot.df1 = data.frame(x = plot.df$imputed_IBU,
y = plot.df$ABV,
predicted = plot.df$predicted)
find_hull = function(df) df[chull(df$x, df$y), ]
boundary = ddply(plot.df1, .variables = "predicted", .fun = find_hull)
ggplot(plot.df, aes(imputed_IBU, ABV, color = predicted, fill = predicted)) +
geom_point(size = 5) +
geom_polygon(data = boundary, aes(x,y), alpha = 0.5) + ggtitle("KNN Clusters Boundery")
# plot source:
splitPerc = .70
set.seed(j*49+15)
trainIndices = sample(1:dim(ale_ipa)[1],round(splitPerc * dim(ale_ipa)[1]))
train = ale_ipa[trainIndices,]
test = ale_ipa[-trainIndices,]
# Do knn
fit = knn(train[,c(8,10)], test[,c(8,10)],train$ipa_ale,k=5)
# Create a dataframe to simplify charting
plot.df = data.frame(test, predicted = fit)
plot.df
# Use ggplot
# 2-D plots example only
# Sepal.Length vs Sepal.Width
# First use Convex hull to determine boundary points of each cluster
plot.df1 = data.frame(x = plot.df$imputed_IBU,
y = plot.df$ABV,
predicted = plot.df$predicted)
find_hull = function(df) df[chull(df$x, df$y), ]
boundary = ddply(plot.df1, .variables = "predicted", .fun = find_hull)
ggplot(plot.df, aes(imputed_IBU, ABV, color = predicted, fill = predicted)) +
geom_point(size = 5) +
geom_polygon(data = boundary, aes(x,y), alpha = 0.5) + ggtitle("KNN Clusters Boundery")
# plot source:
splitPerc = .70
set.seed(j*49+15)
trainIndices = sample(1:dim(ale_ipa)[1],round(splitPerc * dim(ale_ipa)[1]))
train = ale_ipa[trainIndices,]
test = ale_ipa[-trainIndices,]
# Do knn
fit = knn(train[,c(8,10)], test[,c(8,10)],train$ipa_ale,k=5)
# Create a dataframe to simplify charting
plot.df = data.frame(test, predicted = fit)
plot.df
# Use ggplot
# 2-D plots example only
# Sepal.Length vs Sepal.Width
# First use Convex hull to determine boundary points of each cluster
plot.df1 = data.frame(x = plot.df$imputed_IBU,
y = plot.df$ABV,
predicted = plot.df$predicted)
find_hull = function(df) df[chull(df$x, df$y), ]
boundary = ddply(plot.df1, .variables = "predicted", .fun = find_hull)
ggplot(plot.df, aes(imputed_IBU, ABV, color = predicted, fill = predicted)) +
geom_point(size = 2) +
geom_polygon(data = boundary, aes(x,y), alpha = 0.5) + ggtitle("KNN Clusters Boundery")
# plot source:
splitPerc = .70
set.seed(j*49+15)
trainIndices = sample(1:dim(ale_ipa)[1],round(splitPerc * dim(ale_ipa)[1]))
train = ale_ipa[trainIndices,]
test = ale_ipa[-trainIndices,]
# Do knn
fit = knn(train[,c(8,10)], test[,c(8,10)],train$ipa_ale,k=5)
# Create a dataframe to simplify charting
plot.df = data.frame(test, predicted = fit)
plot.df
# Use ggplot
# 2-D plots example only
# Sepal.Length vs Sepal.Width
# First use Convex hull to determine boundary points of each cluster
plot.df1 = data.frame(x = plot.df$imputed_IBU,
y = plot.df$ABV,
predicted = plot.df$predicted)
find_hull = function(df) df[chull(df$x, df$y), ]
boundary = ddply(plot.df1, .variables = "predicted", .fun = find_hull)
ggplot(plot.df, aes(imputed_IBU, ABV, color = predicted, fill = predicted)) +
geom_point(size = 2) +
geom_polygon(data = boundary, aes(x,y), alpha = 0.5) + ggtitle("KNN Clusters Boundery") + theme_economist()
# plot source:
splitPerc = .70
set.seed(j*49+15)
trainIndices = sample(1:dim(ale_ipa)[1],round(splitPerc * dim(ale_ipa)[1]))
train = ale_ipa[trainIndices,]
test = ale_ipa[-trainIndices,]
# Do knn
fit = knn(train[,c(8,10)], test[,c(8,10)],train$ipa_ale,k=5)
# Create a dataframe to simplify charting
plot.df = data.frame(test, predicted = fit)
plot.df
# First use Convex hull to determine boundary points of each cluster
plot.df1 = data.frame(x = plot.df$imputed_IBU,
y = plot.df$ABV,
predicted = plot.df$predicted)
find_hull = function(df) df[chull(df$x, df$y), ]
boundary = ddply(plot.df1, .variables = "predicted", .fun = find_hull)
ggplot(plot.df, aes(imputed_IBU, ABV, color = predicted, fill = predicted)) +
geom_point(size = 2) +
geom_polygon(data = boundary, aes(x,y), alpha = 0.5) + ggtitle("KNN Clusters Boundery") + theme_economist()
# plot source: https://stackoverflow.com/questions/35402850/how-to-plot-knn-clusters-boundaries-in-r
splitPerc = .70
set.seed(j*49+15)
trainIndices = sample(1:dim(ale_ipa)[1],round(splitPerc * dim(ale_ipa)[1]))
train = ale_ipa[trainIndices,]
test = ale_ipa[-trainIndices,]
# Do knn
fit = knn(train[,c(8,10)], test[,c(8,10)],train$ipa_ale,k=5)
# Create a dataframe to simplify charting
plot.df = data.frame(test, predicted = fit)
plot.df
# First use Convex hull to determine boundary points of each cluster
plot.df1 = data.frame(x = plot.df$imputed_IBU,
y = plot.df$ABV,
predicted = plot.df$predicted)
find_hull = function(df) df[chull(df$x, df$y), ]
boundary = ddply(plot.df1, .variables = "predicted", .fun = find_hull)
ggplot(plot.df, aes(imputed_IBU, ABV, color = predicted, fill = ipa_ale)) +
geom_point(size = 2) +
geom_polygon(data = boundary, aes(x,y), alpha = 0.5) + ggtitle("KNN Clusters Boundery") + theme_economist()
splitPerc = .70
set.seed(j*49+15)
trainIndices = sample(1:dim(ale_ipa)[1],round(splitPerc * dim(ale_ipa)[1]))
train = ale_ipa[trainIndices,]
test = ale_ipa[-trainIndices,]
# Do knn
fit = knn(train[,c(8,10)], test[,c(8,10)],train$ipa_ale,k=5)
# Create a dataframe to simplify charting
plot.df = data.frame(test, predicted = fit)
plot.df$ipa_ale = as.factor(plot.df$ipa_ale)
plot.df
# First use Convex hull to determine boundary points of each cluster
plot.df1 = data.frame(x = plot.df$imputed_IBU,
y = plot.df$ABV,
predicted = plot.df$predicted)
find_hull = function(df) df[chull(df$x, df$y), ]
boundary = ddply(plot.df1, .variables = "predicted", .fun = find_hull)
ggplot(plot.df, aes(imputed_IBU, ABV, color = predicted, fill = predicted)) +
geom_point(size = 2) +
geom_polygon(data = boundary, aes(x,y), alpha = 0.5) + ggtitle("KNN Clusters Boundery") + theme_economist()
# plot source: https://stackoverflow.com/questions/35402850/how-to-plot-knn-clusters-boundaries-in-r
splitPerc = .70
set.seed(j*49+15)
trainIndices = sample(1:dim(ale_ipa)[1],round(splitPerc * dim(ale_ipa)[1]))
train = ale_ipa[trainIndices,]
test = ale_ipa[-trainIndices,]
# Do knn
fit = knn(train[,c(8,10)], test[,c(8,10)],train$ipa_ale,k=5)
# Create a dataframe to simplify charting
plot.df = data.frame(test, predicted = fit)
plot.df$ipa_ale = as.factor(plot.df$ipa_ale)
plot.df
# First use Convex hull to determine boundary points of each cluster
plot.df1 = data.frame(x = plot.df$imputed_IBU,
y = plot.df$ABV,
predicted = plot.df$predicted)
find_hull = function(df) df[chull(df$x, df$y), ]
boundary = ddply(plot.df1, .variables = "predicted", .fun = find_hull)
ggplot(plot.df, aes(imputed_IBU, ABV, color = ipa_ale, fill = predicted)) +
geom_point(size = 2) +
geom_polygon(data = boundary, aes(x,y), alpha = 0.5) + ggtitle("KNN Clusters Boundery") + theme_economist()
splitPerc = .70
set.seed(j*49+15)
trainIndices = sample(1:dim(ale_ipa)[1],round(splitPerc * dim(ale_ipa)[1]))
train = ale_ipa[trainIndices,]
test = ale_ipa[-trainIndices,]
# Do knn
fit = knn(train[,c(8,10)], test[,c(8,10)],train$ipa_ale,k=5)
# Create a dataframe to simplify charting
plot.df = data.frame(test, predicted = fit)
plot.df$ipa_ale = as.factor(plot.df$ipa_ale)
plot.df
# First use Convex hull to determine boundary points of each cluster
plot.df1 = data.frame(x = plot.df$imputed_IBU,
y = plot.df$ABV,
predicted = plot.df$predicted)
find_hull = function(df) df[chull(df$x, df$y), ]
boundary = ddply(plot.df1, .variables = "predicted", .fun = find_hull)
ggplot(plot.df, aes(imputed_IBU, ABV, color = predicted, fill = predicted)) +
geom_point(size = 2) +
geom_polygon(data = boundary, aes(x,y), alpha = 0.5) + ggtitle("KNN Clusters Boundery") + theme_economist()
# plot source: https://stackoverflow.com/questions/35402850/how-to-plot-knn-clusters-boundaries-in-r
splitPerc = .70
set.seed(j*49+15)
trainIndices = sample(1:dim(ale_ipa)[1],round(splitPerc * dim(ale_ipa)[1]))
train = ale_ipa[trainIndices,]
test = ale_ipa[-trainIndices,]
# Do knn
fit = knn(train[,c(8,10)], test[,c(8,10)],train$ipa_ale,k=5)
# Create a dataframe to simplify charting
plot.df = data.frame(test, predicted = fit)
plot.df$ipa_ale = as.factor(plot.df$ipa_ale)
plot.df
# First use Convex hull to determine boundary points of each cluster
plot.df1 = data.frame(x = plot.df$imputed_IBU,
y = plot.df$ABV,
predicted = plot.df$predicted)
find_hull = function(df) df[chull(df$x, df$y), ]
boundary = ddply(plot.df1, .variables = "predicted", .fun = find_hull)
ggplot(plot.df, aes(imputed_IBU, ABV, color = predicted, fill = predicted)) +
geom_point(size = 2) #+
#  geom_polygon(data = boundary, aes(x,y), alpha = 0.5) + ggtitle("KNN Clusters Boundery") + theme_economist()
# plot source: https://stackoverflow.com/questions/35402850/how-to-plot-knn-clusters-boundaries-in-r
splitPerc = .70
set.seed(j*49+15)
trainIndices = sample(1:dim(ale_ipa)[1],round(splitPerc * dim(ale_ipa)[1]))
train = ale_ipa[trainIndices,]
test = ale_ipa[-trainIndices,]
# Do knn
fit = knn(train[,c(8,10)], test[,c(8,10)],train$ipa_ale,k=5)
# Create a dataframe to simplify charting
plot.df = data.frame(test, predicted = fit)
plot.df$ipa_ale = as.factor(plot.df$ipa_ale)
plot.df
# First use Convex hull to determine boundary points of each cluster
plot.df1 = data.frame(x = plot.df$imputed_IBU,
y = plot.df$ABV,
predicted = plot.df$predicted)
find_hull = function(df) df[chull(df$x, df$y), ]
boundary = ddply(plot.df1, .variables = "predicted", .fun = find_hull)
ggplot(plot.df, aes(imputed_IBU, ABV, color = predicted, fill = predicted)) +
geom_point(size = 2) +   geom_polygon(data = boundary, aes(x,y), alpha = 0.5) + ggtitle("KNN Clusters Boundery") + theme_economist()
# plot source: https://stackoverflow.com/questions/35402850/how-to-plot-knn-clusters-boundaries-in-r
splitPerc = .70
set.seed(j*49+15)
trainIndices = sample(1:dim(ale_ipa)[1],round(splitPerc * dim(ale_ipa)[1]))
train = ale_ipa[trainIndices,]
test = ale_ipa[-trainIndices,]
# Do knn
fit = knn(train[,c(8,10)], test[,c(8,10)],train$ipa_ale,k=5)
# Create a dataframe to simplify charting
plot.df = data.frame(test, predicted = fit)
plot.df$ipa_ale = as.factor(plot.df$ipa_ale)
plot.df
# First use Convex hull to determine boundary points of each cluster
plot.df1 = data.frame(x = plot.df$imputed_IBU,
y = plot.df$ABV,
predicted = plot.df$predicted)
find_hull = function(df) df[chull(df$x, df$y), ]
boundary = ddply(plot.df1, .variables = "predicted", .fun = find_hull)
ggplot(plot.df, aes(imputed_IBU, ABV, color = predicted, fill = predicted)) +
geom_point(size = 2) +   geom_polygon(data = boundary, aes(x,y), alpha = 0.5) + ggtitle("KNN Clusters Prediction Boundery") + theme_economist()
# plot source: https://stackoverflow.com/questions/35402850/how-to-plot-knn-clusters-boundaries-in-r
